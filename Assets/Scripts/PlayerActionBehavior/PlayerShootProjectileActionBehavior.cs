// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System.Collections;
using UnityEngine;

public class PlayerShootProjectileActionBehavior : PlayerActionBehavior
{
	private float frequency;

	public PlayerShootProjectileActionBehavior(PlayerController player,string key) : base(player, key)
	{
		this.frequency = player.shootFrequency;
		Bullet.limit = player.bulletLimit;
	}

	public override void actionPerform ()
	{
		bool isFireButtonDown;
		if (!GameInformation.instance.isControlledByPlayer) {
            isFireButtonDown = GameInformation.instance.GetCurrentPlayerInput().isFireButtonDown;
        } else {
            isFireButtonDown = Input.GetButtonDown(key);
        }

		if (isFireButtonDown)
		{
			if (player.isShootable && (Bullet.limit <= 0 || Bullet.total < Bullet.limit))
			{
				player.shootingAnimationRemaningTime = player.shootingAnimationTimePeriod;
				shootBullet();
				player.StartCoroutine(reload());
			}
		}
	}

	private void shootBullet(){
		if (Bullet.total < Bullet.limit)
		{
			BoxCollider2D bulletCollider2D = player.bullet.GetComponent<BoxCollider2D>();
			BoxCollider2D playerCollider2D = player.GetComponent<BoxCollider2D>();

			float bulletX;
			if (player.horizonDirection < 0) {
				bulletX = player.transform.position.x - ((playerCollider2D.size.x * player.transform.localScale.x / 2.0f) + (bulletCollider2D.size.x * player.bullet.transform.localScale.x / 2.0f) + 0.02f); 
			} else {
				bulletX = player.transform.position.x + ((playerCollider2D.size.x * player.transform.localScale.x / 2.0f) + (bulletCollider2D.size.x * player.bullet.transform.localScale.x / 2.0f) + 0.02f);
			}
			player.bullet.transform.position = new Vector2(bulletX ,player.transform.position.y);
			
			GameObject bullet = Object.Instantiate(player.bullet) as GameObject;
			bullet.GetComponent<Bullet>().horizonDirection = player.horizonDirection;
		}
	}

	private IEnumerator reload(){
		player.isShootable = false;
		yield return new WaitForSeconds(player.shootFrequency);
		player.isShootable = true;
	}
}

