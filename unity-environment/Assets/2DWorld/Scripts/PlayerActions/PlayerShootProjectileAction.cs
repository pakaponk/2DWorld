// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System.Collections;
using UnityEngine;

public class PlayerShootProjectileAction : PlayerAction
{
	private float frequency;

	public PlayerShootProjectileAction(PlayerController player,string key) : base(player, key)
	{
		this.frequency = player.shootFrequency;
	}

	public override void Perform () {
		bool isFireButtonDown = IsFireButtonDown();

		if (isFireButtonDown)
		{
			if (player.isShootable && player.IsRunOutOfBullet())
			{
				player.shootingAnimationRemaningTime = player.shootingAnimationTimePeriod;
				shootBullet();
				player.StartCoroutine(reload());
			}
		}
	}

	public override void Perform (PlayerInput input) {
		bool isFireButtonDown = input.isFireButtonDown;

		if (isFireButtonDown)
		{
			if (player.isShootable && player.IsRunOutOfBullet())
			{
				player.shootingAnimationRemaningTime = player.shootingAnimationTimePeriod;
				shootBullet();
				player.StartCoroutine(reload());
			}
		}
	}  

	private bool IsFireButtonDown() {
		if (GameRecorder.instance.isControlledByPlayer) {
            return Input.GetButtonDown(key);
        } else {
            return GameRecorder.instance.GetCurrentPlayerInput().isFireButtonDown;
        }
	}

	private void shootBullet(){
		if (player.IsRunOutOfBullet())
		{
			BoxCollider2D bulletCollider2D = player.bullet.GetComponent<BoxCollider2D>();
			BoxCollider2D playerCollider2D = player.GetComponent<BoxCollider2D>();

			float bulletX;
			if (player.horizonDirection < 0) {
				bulletX = player.transform.localPosition.x - ((playerCollider2D.size.x * player.transform.localScale.x / 2.0f) + (bulletCollider2D.size.x * player.bullet.transform.localScale.x / 2.0f) + 0.02f); 
			} else {
				bulletX = player.transform.localPosition.x + ((playerCollider2D.size.x * player.transform.localScale.x / 2.0f) + (bulletCollider2D.size.x * player.bullet.transform.localScale.x / 2.0f) + 0.02f);
			}
			player.bullet.transform.localPosition = new Vector2(bulletX ,player.transform.localPosition.y);
			
			GameObject bullet = Object.Instantiate(player.bullet, player.transform.parent) as GameObject;
			bullet.GetComponent<Bullet>().horizonDirection = player.horizonDirection;
			bullet.GetComponent<Bullet>().Player = player;

			player.IncreaseTotalBullet();
		}
	}

	private IEnumerator reload(){
		player.isShootable = false;
		yield return new WaitForSeconds(player.shootFrequency);
		player.isShootable = true;
	}
}

